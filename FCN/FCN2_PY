import random
import display
import decoder
import encoder
import tensorflow as tf
import numpy as np
import load_images_and_mask

IMG_WIDTH, IMG_HEIGHT= 256,256
IMG_CHANNELS = 3

train_images_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\train'
train_masks_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\train_ann'
val_images_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\val'
val_masks_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\val_ann'
test_images_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\test'
test_masks_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem\\apples\\test_ann'

X_train, y_train = load_images_and_mask.load_images_and_masks(train_images_path, train_masks_path, (IMG_WIDTH,IMG_HEIGHT))
X_val, y_val = load_images_and_mask.load_images_and_masks(val_images_path, val_masks_path, (IMG_WIDTH,IMG_HEIGHT))
X_test, y_test = load_images_and_mask.load_images_and_masks(test_images_path, test_masks_path, (IMG_WIDTH,IMG_HEIGHT))


num_classes = 1
inputs = tf.keras.layers.Input(shape=(IMG_WIDTH, IMG_HEIGHT, 3))

encoders = encoder.encoder(inputs)
outputs = decoder.decoder(encoders, num_classes)
model = tf.keras.Model(inputs=[inputs], outputs=[outputs])


callbacks = [
        tf.keras.callbacks.EarlyStopping(patience=15, monitor='val_loss'),
        tf.keras.callbacks.TensorBoard(log_dir='logs')]


model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, validation_data=(X_val,y_val), batch_size=32, epochs=2, callbacks=callbacks)
saved_model_path = 'C:\\Users\\carlo\\Documents\\Processamento-de-imagem'

# Salve o modelo em disco
model.save(saved_model_path)

loss = model.history.history['loss']
val_loss = model.history.history['val_loss']

i = random.randint(0, len(X_test))
sample_image = X_test[i]
sample_mask = y_test[i]

prediction = model.predict(X_test)

predicted_mask = (prediction[i] > 0.5).astype(np.uint8)

display.display([sample_image, sample_mask,predicted_mask])